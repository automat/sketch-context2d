if(!NSClassFromString('ATContext2dJS')){
    if(!Mocha.sharedRuntime().loadFrameworkWithName_inDirectory_('Context2d', __dirname__ + '/lib/Context2d')){
        throw new Error('Unable to load Context2d.framework');
    }
}

var SCRIPT_NAME = __scriptname__;

//filter selection
var document  = context.document;
if(!document){
    print('No document selected.');
    return;
}

var page = document.currentPage();
var artboard = page.currentArtboard();

if(!artboard){
    if(__autocreate__){
        //create artboard
        artboard = MSArtboardGroup.new();
        var frame = artboard.frame();
        frame.setX_(0);
        frame.setY_(0);
        frame.setWidth_(800);
        frame.setHeight_(600);
        page.addLayers_([artboard]);

    } else {
        //select first artboard available
        if(__autoartboard__){
            var artboards = document.artboards();
            for(var i = 0; i < artboards.count(); ++i){
                artboard = artboards[i];
            }
            if(!artboard){
                var msg = 'Document has no artboards.';
                print(msg);
                document.showMessage_(msg);
                return;
            }
        } else {
            var msg = 'No artboard selected.';
            print(msg);
            document.showMessage_(msg);
            return;
        }
    }
}

var selection  = context.selection;
var target     = null;
var targetSize = [artboard.frame().size().width,artboard.frame().size().height];

if(selection.count() == 0){
    target = artboard;
} else {
    var first = selection.firstObject();
    if(first.class() == MSLayerGroup){
        var size = first.frame().size();
        if(size.width != 0 || size.height != 0){
            targetSize[0] = size.width;
            targetSize[1] = size.height;
        }
        target = first;
    } else {
        target = artboard;
    }
}

if(!target && document.artboards().count() > 0){
    artboard = document.artboards().firstObject();
    target   = artboard;
}

//check render target set
if(!target){
    var msg = 'No target selected';
    document.showMessage_(msg);
    print(msg);
    return;
}

//script render target group
var group;
var groupIndex = -1;

//check if there is already a script group
var contextGroups = [];

function find(element){
    var class_ = element.class();
    if(class_ != MSArtboardGroup && class_ != MSLayerGroup){
        return;
    }
    var name = element.name();
    if(name.indexOf(SCRIPT_NAME) != -1){
        if(name.indexOf('keep') == -1){
            contextGroups.push(element);
        }
    }

    var layers = element.layers();
    var length = layers.count();
    for(var i = 0; i < length; ++i){
        find(layers.objectAtIndex(i));
    }
}

find(target);

if(contextGroups.length > 0){
    contextGroups.sort(function(a, b){
        var tokensA = a.name().split('_');
        var tokensB = b.name().split('_');
        var timestampA = tokensA[tokensA.length - 1];
        var timestampB = tokensB[tokensB.length - 1];

        return timestampA > timestampB ? -1 : 1;
    });

    group = contextGroups[0];
    groupIndex = target.indexOfLayer_(group);

    if(!__recreate__){
        target.removeLayer(group);
    } else {
        groupIndex+=1;
    }
}


//create/override group
group = MSLayerGroup.new();
if(groupIndex == -1){
    target.addLayers_([group]);
} else {
    target.insertLayers_atIndex_([group],groupIndex);
}

//update timestamp file
group.setName_(SCRIPT_NAME + '_' + new Date().getTime());

var time;
if(!!__verbose__){
    var date = new Date();
    time = date.getTime();
    print('' + date);
    print('Script start');
}

//canvas group + initial size
var canvasTarget = ATSketchCanvasTarget.new();
canvasTarget.setGroup_(group);
canvasTarget.setSize_(NSMakeSize(targetSize[0],targetSize[1]));

//run script with context
ATContext2dJS.setVerbose(!!__verboselog__);
ATContext2dJS.runScriptAtPath_withTarget(__dirname__ + '/plugin/plugin.js',canvasTarget);

if(__flatten__){
}

//keep target selection valid
target.select_byExpandingSelection_(true,false);

if(!!__verbose__){
    function pad(num, size){
        var str = '' + num;
        while(str.length < size){
            str = '0' + str;
        }
        return str;
    }

    var duration = new Date(new Date().getTime() - time);
    print('Script end: ' + pad(Math.max(duration.getHours()-1,0),2) + ':' +
                           pad(duration.getMinutes(),2) + ':' +
                           pad(duration.getSeconds(),2));
}