var ContextJS = {
    execute : function(script,globals){
        globals = globals || {};

        var webView      = WebView.new();
        var scriptObject = webView.windowScriptObject();

        //based on https://github.com/matt-curtis/MochaJSWebScriptingObject
        function toScriptingObject(properties){
            var name = "MochaJSWebScriptingObject_DynamicClass_" + NSUUID.UUID().UUIDString();
            var desc = MOClassDescription.allocateDescriptionForClassWithName_superclass_(name, NSObject);

            var temp = [];
            function toJSArray(arr){
                temp.length = arr.count();
                for(var i = 0, l = temp.length; i < l; ++i){
                    temp[i] = arr[i];
                }
                return temp;
            }

            var ctx = JSContext.new();
            desc.addInstanceMethodWithSelector_function_(
                "invokeUndefinedMethodFromWebScript:withArguments:",
                function(name,args){
                    var method = properties[name];
                    if(!method){
                        return null;
                    }
                    var result = method.apply(null,toJSArray(args));
                    return JSValue.valueWithObject_inContext_(result, ctx).toObject();
                }
            );

            desc.registerClass();
            return NSClassFromString(name).new();
        }

        for(var key in globals){
            var global = globals[key];
            var type   = typeof global;
            switch (type){
                case 'object':
                    global = toScriptingObject(global);
                    break;
                default:
                    throw new Error('Type not supported "' + type + '"');
            }
            scriptObject.setValue_forKey_(global,key);
        }

        scriptObject.evaluateWebScript_(script);
    }
};