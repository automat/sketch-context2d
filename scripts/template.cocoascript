@import '__dirname__/scripts/ContextJS.cocoascript'
@import '__dirname__/scripts/Context2dBindings+Wrap.cocoascript'

var SCRIPT_NAME = '__scriptName__';

var document  = context.document;
var page      = document.currentPage();
var artboard  = page.currentArtboard();
var selection = context.selection;
var target    = null;

if(selection.count() == 0){
    target = artboard;
} else {
    var first = selection.firstObject();
    target = first.class() == MSLayerGroup ? first : artboard;
}

/* CHECK RENDER TARGET SET */

if(!target){
    throw new Error('No target selected.');
}

/* SCRIPT RENDER TARGET GROUP */
var group;

if(!__recreate__) {
    var contextGroups = [];

    function find(element){
        var class_ = element.class();
        if(class_ != MSArtboardGroup && class_ != MSLayerGroup){
            return;
        }
        var name = element.name();
        if(name.indexOf(SCRIPT_NAME) != -1){
            if(name.indexOf('keep') == -1){
                contextGroups.push(element);
            }
        }

        var layers = element.layers();
        var length = layers.count();
        for(var i = 0; i < length; ++i){
            find(layers.objectAtIndex(i));
        }
    }

    find(target);

    if(contextGroups.length > 0){
        contextGroups.sort(function(a, b){
            var tokensA = a.name().split('_');
            var tokensB = b.name().split('_');
            var timestampA = tokensA[tokensA.length - 1];
            var timestampB = tokensB[tokensB.length - 1];

            return timestampA > timestampB ? -1 : 1;
        });

        group = contextGroups[0];
        target.removeLayer(group);
    }
}

group = MSLayerGroup.new();
target.addLayers([group]);
group.setName_(SCRIPT_NAME + '_' + new Date().getTime());

//canvas size is fixed
var targetSize   = target.bounds().size;
var targetWidth  = +targetSize.width;
var targetHeight = +targetSize.height;

/* INJECTED GLOBALS JS CONTEXT */

var globals = {
    console : {
        log : function(){
            var msg = '';
            for(var i = 0; i < arguments.length; ++i){
                msg += arguments[i] + ', ';
            }
            print(!msg.length ? ' ' : msg.substr(0, msg.length - 2));
        }
    },
    __sketch : {
        handleScriptError : function(err){
            print('Error: ' + args[0] + ' @:');
            var stack = args[1].split('\n');
            for(var i = 0; i < stack.length; ++i){
                print('    ' + stack[i]);
            }
        },
        //get target (artboard/group) width
        targetWidth : function(){
            return targetWidth;
        },
        //get target (artboard/group) height
        targetHeight : function(){
            return targetHeight;
        },
        //set target (artboard/group) width
        setTargetWidth : function(width){
            width = +width;
            target.frame().setWidth_(width);
            targetWidth = width;

        },
        //set target (artboard/group) height
        setTargetHeight : function(height){
            height = +height;
            target.frame().setHeight_(height);
            targetHeight = height;
        }
    },
    //bindings export
    __bindings :  Context2DBindings(group)
};

/* SCRIPT */

var path = '__dirname__/plugin/plugin.js';
var code = NSString
    .stringWithContentsOfFile_(path)
    .replace(new RegExp('__canvasWrap__','g'),'(' + Context2DWrap + ')()')
    .replace(new RegExp('__onError__','g'),'__sketch.handleScriptError(e.message,e.stack)');

ContextJS.execute(code,globals);

if(__flatten__){

}

//keep target selection valid
target.select_byExpandingSelection_(true,false);

print('Done');